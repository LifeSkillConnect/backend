// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                   String    @id @default(cuid())
  email                String    @unique
  fullname             String
  username             String?
  phoneNumber          String?
  password             String?
  authProvider         String    @default("EMAIL") // Possible values: EMAIL, GOOGLE, FACEBOOK, APPLE
  role                 String    @default("USER") // Possible values: USER, ADMIN
  isActive             Boolean   @default(true)
  dateOfBirth          DateTime?
  profilePicture       String? // Optional field for profile picture URL
  howdidyouhearaboutus String? // Optional field for referral source
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  modules Module[]
}

model Otp {
  id        String   @id @default(cuid())
  email     String
  otp       String
  isUsed    Boolean  @default(false)
  expiresAt DateTime @default(dbgenerated("(now() + interval '10 minutes')"))
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Module {
  id                          String   @id @default(uuid())
  title                       String
  plan_type                   PlanType
  isCertificationOnCompletion Boolean  @default(false)
  total_hours                 Float
  subtitle_available          Boolean  @default(false)
  description                 String?
  features                    String[] // Array of features
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt
  User                        User?    @relation(fields: [userId], references: [id])
  userId                      String?
}

enum PlanType {
  free
  premium
}
